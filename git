今天学习git的一些用法：
#主要从<<pro git>>和<<git权威指南>>两本书中学习。
github使用简介：
1、注册
2、copy公钥到github

aptitude install git
git特点：
1、linux大神杰作
2、分布式的版本控制，拒绝了服务器的单点故障

配置：
/etc/gitconfig:系统中对所有用户都适用的配置，使用git config --system命令编辑
~/.gitcongfig:特定用户的配置文件，使用git config --global命令编辑
.git/config:工作目录中的配置文件，仅仅对当前目录有效，每一级配置都会覆盖上层的相同配置
git config -e --system == vim /etc/gitconfig

重要配置：
1、用户信息
   git config --global user.name "wendaozhe"
   git config --global user.email "wendaozhe@gmail.com"
2、默认编辑器
   git config --global core.editor vim
3、设置别名
   git config --system alias.st status
   git config --global alias.ci commit
4、开启命令输出的颜色显示
   git config --system color.ui true
3、查看配置文件
   git config --list

命令学习：
1、git init [name] 用于创建版本库
2、git add *.sh 开始跟踪文件
3、git clone url [name]  克隆远程源码为[name]
4、git status 查看文件当前处于什么状态 -s 参数用于精简模式的输出(注意输出M的位置的变化)
5、git commit 用于把暂存区的数据提交到版本控制系统，-m参数可以直接跟提交说明,-s参数用来在提交说明中直接添加提交者的姓名和email信息,-a参数可以不经过add而直接提交所有跟踪文件的变更操作(强烈不建议),--amend参数用来修改最后一次提交过的的提交说明
6、git log 用来查看日志，--stat参数可用来查看文件变更的统计，--pretty=oneline用来显示日志首行的内容,新版本中可以直接使用--oneline来查看首行
7、git diff用了查看修改后的文件与版本库中的文件的差异 --cached或--staged参数显示的是暂存区和版本库中的文件的差异,加上分支名称(master)显示版本库中的文件和修改后的文件的差异
8、git stash 用来保存当前工作区的工作进度
9、git reset 用来取消暂存区的文件,--hard num 用来重置版本库和工作区文件，num可以根据git log --oneline来查看,最终可以根据git reflog show master中获得，进而任意恢复
10、git rm 用来删除跟踪文件清单和工作区中的文件，如果仅仅想从跟踪文件清单中删除，需要加带--cached参数
11、git mv 用来移动文件
12、关于分支
   git branch 显示分支名称，加*者为当前分支 -v 可显示最后一次提交信息，--merged用来查看哪些分支已经并入当前分支，--no-merged 用来查看尚未合并的分支
   git branch name 创建分支name
   git checkout name 转换到分支name
   git checkout master && git merge name 合并分支name
   git branch -d name 删除分支name

